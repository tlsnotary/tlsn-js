/* tslint:disable */
/* eslint-disable */
export function __wbg_attestation_free(a: number): void;
export function attestation_verifying_key(a: number): number;
export function attestation_serialize(a: number, b: number): void;
export function attestation_deserialize(a: number, b: number, c: number): void;
export function __wbg_secrets_free(a: number): void;
export function secrets_transcript(a: number): number;
export function secrets_serialize(a: number, b: number): void;
export function secrets_deserialize(a: number, b: number, c: number): void;
export function __wbg_presentation_free(a: number): void;
export function presentation_verify(a: number, b: number): void;
export function presentation_serialize(a: number, b: number): void;
export function presentation_deserialize(a: number, b: number, c: number): void;
export function __wbg_notarizationoutput_free(a: number): void;
export function __wbg_get_notarizationoutput_attestation(a: number): number;
export function __wbg_set_notarizationoutput_attestation(a: number, b: number): void;
export function __wbg_get_notarizationoutput_secrets(a: number): number;
export function __wbg_set_notarizationoutput_secrets(a: number, b: number): void;
export function presentation_verifying_key(a: number): number;
export function __wbg_prover_free(a: number): void;
export function prover_new(a: number): number;
export function prover_setup(a: number, b: number, c: number): number;
export function prover_send_request(a: number, b: number, c: number, d: number): number;
export function prover_transcript(a: number, b: number): void;
export function prover_notarize(a: number, b: number): number;
export function prover_reveal(a: number, b: number): number;
export function __wbg_verifier_free(a: number): void;
export function verifier_new(a: number): number;
export function verifier_connect(a: number, b: number, c: number): number;
export function verifier_verify(a: number): number;
export function init_logging(a: number): void;
export function build_presentation(a: number, b: number, c: number, d: number): void;
export function __wbg_wbg_rayon_poolbuilder_free(a: number): void;
export function wbg_rayon_poolbuilder_numThreads(a: number): number;
export function wbg_rayon_poolbuilder_receiver(a: number): number;
export function wbg_rayon_poolbuilder_build(a: number): void;
export function initThreadPool(a: number): number;
export function wbg_rayon_start_worker(a: number): void;
export function ring_core_0_17_8_bn_mul_mont(a: number, b: number, c: number, d: number, e: number, f: number): void;
export const memory: WebAssembly.Memory;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_3: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hd8c84f49153a7c6d(a: number, b: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h00812a7613793b91(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h9d295f1cf730c900(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h736f58eab9c526ff(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h7140be93c47d30db(a: number, b: number, c: number, d: number): void;
export function __wbindgen_thread_destroy(a: number, b: number): void;
export function __wbindgen_start(): void;
