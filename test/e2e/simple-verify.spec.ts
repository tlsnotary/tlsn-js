import { Presentation as _Presentation } from '../../src/lib';
// import { assert } from '../utils';
import * as Comlink from 'comlink';
import { Transcript } from '../../src/lib';
import { assert } from '../utils';

const { init, Presentation }: any = Comlink.wrap(
  // @ts-ignore
  new Worker(new URL('../worker.ts', import.meta.url)),
);

(async function verify_simple() {
  try {
    await init({ loggingLevel: 'Debug' });

    console.time('verify');
    const proofHex = ``;
    const proof = (await new Presentation(proofHex)) as _Presentation;
    const result = await proof.verify();
    console.timeEnd('verify');
    const transcript = new Transcript({
      sent: result.transcript.sent,
      recv: result.transcript.recv,
    });

    const sent = transcript.sent();
    const recv = transcript.recv();
    assert(sent.includes('host: swapi.dev'));
    assert(!sent.includes('secret: test_secret'));
    assert(recv.includes('"name":"Luke Skywalker"'));
    assert(recv.includes('"gender":"male"'));

    // @ts-ignore
    document.getElementById('simple-verify').textContent = 'OK';
  } catch (err) {
    console.log('caught error from wasm');
    console.error(err);

    // @ts-ignore
    document.getElementById('simple-verify').textContent = err.message;
  }
})();
